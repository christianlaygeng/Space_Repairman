using System.Collections.Generic;
using UnityEngine;
using Valve.VR;

//These make sure that we have the components that we need
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(ConfigurableJoint))]
[RequireComponent(typeof(FixedJoint))]
public class GripController : MonoBehaviour
{
    public SteamVR_Input_Sources Hand;
    public SteamVR_Action_Boolean ToggleGripButton;

    private GameObject ConnectedObject;
    public List<GameObject> NearObjects =new List<GameObject>();
    private void Update()
    {
        if (ConnectedObject != null)
        {
            if (ConnectedObject.GetComponent<Interactable>().touchCount == 0)
            {
                GetComponent<ConfigurableJoint>().connectedBody = null;
                GetComponent<FixedJoint>().connectedBody = null;
                
                ConnectedObject.transform.position = Vector3.MoveTowards(ConnectedObject.transform.position, transform.position, .25f);
                ConnectedObject.transform.rotation = Quaternion.RotateTowards(ConnectedObject.transform.rotation, transform.rotation, 10);

                GetComponent<FixedJoint>().connectedBody = ConnectedObject.GetComponent<Rigidbody>();
            }
            else if(ConnectedObject.GetComponent<Interactable>().touchCount > 0)
            {
                GetComponent<FixedJoint>().connectedBody = null;
                GetComponent<ConfigurableJoint>().connectedBody = ConnectedObject.GetComponent<Rigidbody>();
            }
            if (ToggleGripButton.GetStateDown(Hand))
            {
                Release();
            }
        }
        else//if we aren't holding something
        {
            if (ToggleGripButton.GetStateDown(Hand))
            {
                Grip();
            }
        }
    }
    private void Grip()
    {
        GameObject NewObject = ClosestGrabbable();
        if(NewObject != null)
        ConnectedObject = ClosestGrabbable();
    }
    private void Release()
    {
        GetComponent<ConfigurableJoint>().connectedBody = null;
        GetComponent<FixedJoint>().connectedBody = null;
        ConnectedObject = null;
    }
    void OnTriggerEnter (Collider other)
    {
        {
            NearObjects.Add(other.gameObject);
        }
        Debug.Log(NearObjects);
    }
    void OnTriggerExit(Collider other)
    {
        {
            NearObjects.Remove(other.gameObject);
        }
    }
    GameObject ClosestGrabbable()
    {
        GameObject ClosestGameObj = null;
        float Distance = float.MaxValue;
        if (NearObjects != null)
        {
            foreach (GameObject GameObj in NearObjects)
            {
                if ((GameObj.transform.position - transform.position).sqrMagnitude < Distance)
                {
                    ClosestGameObj = GameObj;
                    Distance = (GameObj.transform.position - transform.position).sqrMagnitude;
                }
            }
        }
        return ClosestGameObj;
    }
}